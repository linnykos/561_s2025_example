[{"path":"https://linnykos.github.io/561_s2025_example/articles/UW561S2024Example.html","id":"plotting-the-data","dir":"Articles","previous_headings":"","what":"Plotting the data","title":"Small demo","text":"now want unpack example plotting data.","code":"graphics::plot(res$data,                 col = grDevices::rgb(0.5,0.5,0.5,0.5),                pch = 16,                 asp = T)"},{"path":"https://linnykos.github.io/561_s2025_example/articles/UW561S2024Example.html","id":"interpreting-the-em-results","dir":"Articles","previous_headings":"","what":"Interpreting the EM results","title":"Small demo","text":"Now let’s plot data estimated means marked plot.  can also plot based (estimated) probability sample originates clusters.","code":"graphics::plot(res$data,                 col = rgb(0.5,0.5,0.5,0.5),                pch = 16,                 asp = T) for(i in 1:3){   mean_vec <- res$em_results$means[i,]   graphics::points(x = mean_vec[1],                     y = mean_vec[2],                     cex = 3,                    col = \"white\",                     pch = 16)   graphics::points(x = mean_vec[1],                     y = mean_vec[2],                     cex = 2,                    col = i+1,                     pch = 16) } par(mfrow = c(1,3)) color_palette <- grDevices::colorRampPalette(c(\"lightgray\", \"darkblue\"))(50) break_value <- seq(0, 1, length.out = 50)  for(i in 1:3){   probability_vec <- res$probabilities[,i]   color_vec <- sapply(probability_vec, function(x){     color_palette[which.min(abs(x - break_value))]   })      graphics::plot(res$data,                   col = color_vec,                  pch = 16,                   asp = T,                  main = paste(\"Probability of cluster\", i)) }"},{"path":"https://linnykos.github.io/561_s2025_example/articles/UW561S2024Example.html","id":"comparing-against-k-means-clustering","dir":"Articles","previous_headings":"","what":"Comparing against K-means clustering","title":"Small demo","text":"EM via Gaussian mixture model often known “soft clustering.” can simple comparison K-means, sometimes called “hard clustering.”","code":"set.seed(10) kmean_res <- stats::kmeans(res$data, centers = 3) graphics::plot(res$data,                 col = kmean_res$cluster+1,                pch = 16,                 asp = T)"},{"path":"https://linnykos.github.io/561_s2025_example/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kevin Lin. Maintainer.","code":""},{"path":"https://linnykos.github.io/561_s2025_example/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lin K (2025). UW561S2025Example: Example package UW BIOST 561 S2025. R package version 0.1.0, https://linnykos.github.io/561_s2025_example/.","code":"@Manual{,   title = {UW561S2025Example: Example package of UW BIOST 561 S2025},   author = {Kevin Lin},   year = {2025},   note = {R package version 0.1.0},   url = {https://linnykos.github.io/561_s2025_example/}, }"},{"path":"https://linnykos.github.io/561_s2025_example/index.html","id":"purpose","dir":"","previous_headings":"","what":"Example package of UW BIOST 561 S2025","title":"Example package of UW BIOST 561 S2025","text":"demo package UW BIOST 561 (Spring 2025), taught Kevin Lin. URL GitHub (.e., source code) : https://github.com/linnykos/561_s2025_example URL Pkgdown webpage : https://linnykos.github.io/561_s2025_example/","code":""},{"path":"https://linnykos.github.io/561_s2025_example/index.html","id":"how-to-install","dir":"","previous_headings":"","what":"How to install","title":"Example package of UW BIOST 561 S2025","text":"package called UW561S2025Example. install, run following code (R): Upon completion, can run following code (R):","code":"library(devtools) devtools::install_github(\"linnykos/561_s2025_example\") library(UW561S2025Example) UW561S2025Example::run_example()"},{"path":"https://linnykos.github.io/561_s2025_example/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Example package of UW BIOST 561 S2025","text":"package depends following packages: MASS mvtnorm.","code":""},{"path":"https://linnykos.github.io/561_s2025_example/index.html","id":"session-info","dir":"","previous_headings":"","what":"Session info","title":"Example package of UW BIOST 561 S2025","text":"package developed following environment","code":"> devtools::session_info() ─ Session info ──────────────────────────  setting  value  version  R version 4.3.2 (2023-10-31)  os       macOS Sonoma 14.2.1  system   aarch64, darwin20  ui       RStudio  language (EN)  collate  en_US.UTF-8  ctype    en_US.UTF-8  tz       America/Los_Angeles  date     2025-03-16  rstudio  2023.09.1+494 Desert Sunflower (desktop)  pandoc   NA  ─ Packages ──────────────────────────────  package           * version date (UTC) lib source  cachem              1.0.8   2023-05-01 [1] CRAN (R 4.3.0)  cli                 3.6.2   2023-12-11 [1] CRAN (R 4.3.1)  devtools            2.4.5   2022-10-11 [1] CRAN (R 4.3.0)  digest              0.6.34  2025-01-11 [1] CRAN (R 4.3.1)  ellipsis            0.3.2   2021-04-29 [1] CRAN (R 4.3.0)  fastmap             1.1.1   2023-02-24 [1] CRAN (R 4.3.0)  fs                  1.6.3   2023-07-20 [1] CRAN (R 4.3.0)  glue                1.7.0   2025-01-09 [1] CRAN (R 4.3.1)  htmltools           0.5.7   2023-11-03 [1] CRAN (R 4.3.1)  htmlwidgets         1.6.4   2023-12-06 [1] CRAN (R 4.3.1)  httpuv              1.6.14  2025-01-26 [1] CRAN (R 4.3.1)  later               1.3.2   2023-12-06 [1] CRAN (R 4.3.1)  lifecycle           1.0.4   2023-11-07 [1] CRAN (R 4.3.1)  magrittr            2.0.3   2022-03-30 [1] CRAN (R 4.3.0)  memoise             2.0.1   2021-11-26 [1] CRAN (R 4.3.0)  mime                0.12    2021-09-28 [1] CRAN (R 4.3.0)  miniUI              0.1.1.1 2018-05-18 [1] CRAN (R 4.3.0)  pkgbuild            1.4.3   2023-12-10 [1] CRAN (R 4.3.1)  pkgload             1.3.4   2025-01-16 [1] CRAN (R 4.3.1)  profvis             0.3.8   2023-05-02 [1] CRAN (R 4.3.0)  promises            1.2.1   2023-08-10 [1] CRAN (R 4.3.0)  purrr               1.0.2   2023-08-10 [1] CRAN (R 4.3.0)  R6                  2.5.1   2021-08-19 [1] CRAN (R 4.3.0)  Rcpp                1.0.12  2025-01-09 [1] CRAN (R 4.3.1)  remotes             2.4.2.1 2023-07-18 [1] CRAN (R 4.3.0)  rlang               1.1.3   2025-01-10 [1] CRAN (R 4.3.1)  rstudioapi          0.15.0  2023-07-07 [1] CRAN (R 4.3.0)  sessioninfo         1.2.2   2021-12-06 [1] CRAN (R 4.3.0)  shiny               1.8.0   2023-11-17 [1] CRAN (R 4.3.1)  stringi             1.8.3   2023-12-11 [1] CRAN (R 4.3.1)  stringr             1.5.1   2023-11-14 [1] CRAN (R 4.3.1)  urlchecker          1.0.1   2021-11-30 [1] CRAN (R 4.3.0)  usethis             2.2.2   2023-07-06 [1] CRAN (R 4.3.0)  UW561S2025Example * 0.1.0   2025-03-16 [1] local  vctrs               0.6.5   2023-12-01 [1] CRAN (R 4.3.1)  xtable              1.8-4   2019-04-21 [1] CRAN (R 4.3.0)   [1] /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library"},{"path":"https://linnykos.github.io/561_s2025_example/reference/EM_spherical_gaussians.html","id":null,"dir":"Reference","previous_headings":"","what":"EM algorithm for Spherical Gaussians — EM_spherical_gaussians","title":"EM algorithm for Spherical Gaussians — EM_spherical_gaussians","text":"EM algorithm Spherical Gaussians","code":""},{"path":"https://linnykos.github.io/561_s2025_example/reference/EM_spherical_gaussians.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EM algorithm for Spherical Gaussians — EM_spherical_gaussians","text":"","code":"EM_spherical_gaussians(data, k, max.iter = 100, tol = 1e-06)"},{"path":"https://linnykos.github.io/561_s2025_example/reference/EM_spherical_gaussians.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EM algorithm for Spherical Gaussians — EM_spherical_gaussians","text":"data n p matrix, n number samples p number features k number clusters max.iter maximum iteration EM tol relative change log-likelihood. change less tol, method terminates early.","code":""},{"path":"https://linnykos.github.io/561_s2025_example/reference/EM_spherical_gaussians.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EM algorithm for Spherical Gaussians — EM_spherical_gaussians","text":"list elements means, variances, proportions, log_likelihood respective estimated components mixture Spherical Gaussians","code":""},{"path":"https://linnykos.github.io/561_s2025_example/reference/EM_spherical_gaussians.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EM algorithm for Spherical Gaussians — EM_spherical_gaussians","text":"","code":"n <- 500 means <- matrix(c(0, 0, 5, 5), ncol = 2, byrow = TRUE) covariances <- list(diag(2),                     diag(2)) proportions <- c(0.5, 0.5) data <- generate_mixture_gaussians(n, means, covariances, proportions)  # Fit EM algorithm to the generated data k <- 2 # Number of Gaussian components em_results <- EM_spherical_gaussians(data, k) em_results #> $means #>          [,1]     [,2] #> [1,] 5.556755 5.488386 #> [2,] 1.530882 1.444681 #>  #> $variances #> [1] 0.5811481 5.5570134 #>  #> $proportions #> [1] 0.2305486 0.7694514 #>  #> $log_likelihood #> [1] -8.437695e-15 #>"},{"path":"https://linnykos.github.io/561_s2025_example/reference/compute_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the probabilites after EM — compute_probabilities","title":"Compute the probabilites after EM — compute_probabilities","text":"Specifically, compute probabilities sample originating Spherical Gaussian (running EM_spherical_gaussians)","code":""},{"path":"https://linnykos.github.io/561_s2025_example/reference/compute_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the probabilites after EM — compute_probabilities","text":"","code":"compute_probabilities(data, means, variances, proportions)"},{"path":"https://linnykos.github.io/561_s2025_example/reference/compute_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the probabilites after EM — compute_probabilities","text":"data n p matrix, n number samples p number features means matrix p columns k rows (number clusters), row represents mean Spherical Gaussian variances non-negative vector length k, value denotes variance Spherical Gaussian proportions non-negative vector length k sums 1, value denotes relative proportion cluster","code":""},{"path":"https://linnykos.github.io/561_s2025_example/reference/compute_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the probabilites after EM — compute_probabilities","text":"matrix n k, row denotes probability sample drawn cluster. row sums 1 non-negative","code":""},{"path":"https://linnykos.github.io/561_s2025_example/reference/compute_probabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the probabilites after EM — compute_probabilities","text":"","code":"n <- 500 means <- matrix(c(0, 0, 5, 5), ncol = 2, byrow = TRUE) covariances <- list(diag(2),                     diag(2)) proportions <- c(0.5, 0.5) data <- generate_mixture_gaussians(n, means, covariances, proportions)  # Fit EM algorithm to the generated data k <- 2 # Number of Gaussian components em_results <- EM_spherical_gaussians(data, k) means_estimated <- em_results$means variances_estimated <- em_results$variances proportions_estimated <- em_results$proportions  # Compute the probabilities for each sample probabilities <- compute_probabilities(data = data,                                        means = means_estimated,                                        variances = variances_estimated,                                        proportions = proportions_estimated) head(probabilities) #>              [,1]         [,2] #> [1,] 0.0007929579 9.992070e-01 #> [2,] 0.0008513876 9.991486e-01 #> [3,] 0.0100109229 9.899891e-01 #> [4,] 1.0000000000 7.292808e-12 #> [5,] 0.0016568955 9.983431e-01 #> [6,] 0.0059486200 9.940514e-01"},{"path":"https://linnykos.github.io/561_s2025_example/reference/generate_mixture_gaussians.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a mixture of Spherical Gaussians — generate_mixture_gaussians","title":"Simulate a mixture of Spherical Gaussians — generate_mixture_gaussians","text":"Simulate mixture Spherical Gaussians","code":""},{"path":"https://linnykos.github.io/561_s2025_example/reference/generate_mixture_gaussians.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a mixture of Spherical Gaussians — generate_mixture_gaussians","text":"","code":"generate_mixture_gaussians(n, means, covariances, proportions)"},{"path":"https://linnykos.github.io/561_s2025_example/reference/generate_mixture_gaussians.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a mixture of Spherical Gaussians — generate_mixture_gaussians","text":"n number samples means matrix p columns k rows (number clusters), row represents mean Spherical Gaussian covariances list k p positive definite matrices proportions non-negative vector length k sums 1, value denotes relative proportion cluster","code":""},{"path":"https://linnykos.github.io/561_s2025_example/reference/generate_mixture_gaussians.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a mixture of Spherical Gaussians — generate_mixture_gaussians","text":"n p matrix, n number samples p number features","code":""},{"path":"https://linnykos.github.io/561_s2025_example/reference/generate_mixture_gaussians.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a mixture of Spherical Gaussians — generate_mixture_gaussians","text":"","code":"n <- 500 means <- matrix(c(0, 0, 5, 5), ncol = 2, byrow = TRUE) covariances <- list(diag(2),                     diag(2)) proportions <- c(0.5, 0.5) data <- generate_mixture_gaussians(n, means, covariances, proportions) head(data) #>            [,1]       [,2] #> [1,]  5.6693782  6.4887322 #> [2,]  0.5025622 -0.1164599 #> [3,]  5.1609689  4.8101607 #> [4,]  3.4927390  3.9106904 #> [5,] -0.9871484 -1.7914358 #> [6,]  5.1216938  5.3710895"},{"path":"https://linnykos.github.io/561_s2025_example/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://linnykos.github.io/561_s2025_example/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://linnykos.github.io/561_s2025_example/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://linnykos.github.io/561_s2025_example/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://linnykos.github.io/561_s2025_example/reference/run_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate an example — run_example","title":"Simulate an example — run_example","text":"Simulate example","code":""},{"path":"https://linnykos.github.io/561_s2025_example/reference/run_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate an example — run_example","text":"","code":"run_example(n = 5000)"},{"path":"https://linnykos.github.io/561_s2025_example/reference/run_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate an example — run_example","text":"n number samples","code":""},{"path":"https://linnykos.github.io/561_s2025_example/reference/run_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate an example — run_example","text":"list containing data (dataset generated), em_results (output EM_spherical_gaussians), probabilities (output compute_probabilities) program uses following functions: generate_mixture_gaussians, EM_spherical_gaussians, compute_probabilities.","code":""},{"path":[]},{"path":"https://linnykos.github.io/561_s2025_example/reference/run_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate an example — run_example","text":"","code":"res <- run_example() res$em_results #> $means #>              [,1]        [,2] #> [1,]  2.000675688  1.98424467 #> [2,] -0.002657805 -0.03816044 #> [3,]  5.047867139  4.97657474 #>  #> $variances #> [1] 0.1244912 0.9799054 1.4883660 #>  #> $proportions #> [1] 0.4050738 0.2035087 0.3914176 #>  #> $log_likelihood #> [1] -1.376677e-14 #>"}]
